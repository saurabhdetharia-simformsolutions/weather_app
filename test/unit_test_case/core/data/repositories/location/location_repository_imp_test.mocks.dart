// Mocks generated by Mockito 5.4.4 from annotations
// in weather_app/test/unit_test_case/core/data/repositories/location/location_repository_imp_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i4;
import 'package:dio/dio.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;
import 'package:weather_app/core/data/api_service.dart' as _i5;
import 'package:weather_app/core/domain/repositories/app_flavor_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDio_0 extends _i1.SmartFake implements _i2.Dio {
  _FakeDio_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAppFlavorRepository_1 extends _i1.SmartFake
    implements _i3.AppFlavorRepository {
  _FakeAppFlavorRepository_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_2<L, R> extends _i1.SmartFake implements _i4.Either<L, R> {
  _FakeEither_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLeft_3<L, R> extends _i1.SmartFake implements _i4.Left<L, R> {
  _FakeLeft_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDioException_4 extends _i1.SmartFake implements _i2.DioException {
  _FakeDioException_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ApiServiceDio].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiServiceDio extends _i1.Mock implements _i5.ApiServiceDio {
  MockApiServiceDio() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Dio get dioService => (super.noSuchMethod(
        Invocation.getter(#dioService),
        returnValue: _FakeDio_0(
          this,
          Invocation.getter(#dioService),
        ),
      ) as _i2.Dio);

  @override
  _i3.AppFlavorRepository get appFlavorRepository => (super.noSuchMethod(
        Invocation.getter(#appFlavorRepository),
        returnValue: _FakeAppFlavorRepository_1(
          this,
          Invocation.getter(#appFlavorRepository),
        ),
      ) as _i3.AppFlavorRepository);

  @override
  int get timeOutSeconds => (super.noSuchMethod(
        Invocation.getter(#timeOutSeconds),
        returnValue: 0,
      ) as int);

  @override
  set timeOutSeconds(int? _timeOutSeconds) => super.noSuchMethod(
        Invocation.setter(
          #timeOutSeconds,
          _timeOutSeconds,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<_i4.Either<dynamic, dynamic>> get({
    required String? url,
    _i2.CancelToken? cancelToken,
    Map<String, dynamic>? queryParameter,
    Map<String, dynamic>? headers,
    String? isSearchLocationApi = r'',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [],
          {
            #url: url,
            #cancelToken: cancelToken,
            #queryParameter: queryParameter,
            #headers: headers,
            #isSearchLocationApi: isSearchLocationApi,
          },
        ),
        returnValue: _i6.Future<_i4.Either<dynamic, dynamic>>.value(
            _FakeEither_2<dynamic, dynamic>(
          this,
          Invocation.method(
            #get,
            [],
            {
              #url: url,
              #cancelToken: cancelToken,
              #queryParameter: queryParameter,
              #headers: headers,
              #isSearchLocationApi: isSearchLocationApi,
            },
          ),
        )),
      ) as _i6.Future<_i4.Either<dynamic, dynamic>>);

  @override
  _i4.Left<dynamic, dynamic> processDioError(_i2.DioException? e) =>
      (super.noSuchMethod(
        Invocation.method(
          #processDioError,
          [e],
        ),
        returnValue: _FakeLeft_3<dynamic, dynamic>(
          this,
          Invocation.method(
            #processDioError,
            [e],
          ),
        ),
      ) as _i4.Left<dynamic, dynamic>);
}

/// A class which mocks [CancelToken].
///
/// See the documentation for Mockito's code generation for more information.
class MockCancelToken extends _i1.Mock implements _i2.CancelToken {
  MockCancelToken() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set requestOptions(_i2.RequestOptions? _requestOptions) => super.noSuchMethod(
        Invocation.setter(
          #requestOptions,
          _requestOptions,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isCancelled => (super.noSuchMethod(
        Invocation.getter(#isCancelled),
        returnValue: false,
      ) as bool);

  @override
  _i6.Future<_i2.DioException> get whenCancel => (super.noSuchMethod(
        Invocation.getter(#whenCancel),
        returnValue: _i6.Future<_i2.DioException>.value(_FakeDioException_4(
          this,
          Invocation.getter(#whenCancel),
        )),
      ) as _i6.Future<_i2.DioException>);

  @override
  void cancel([Object? reason]) => super.noSuchMethod(
        Invocation.method(
          #cancel,
          [reason],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AppFlavorRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppFlavorRepository extends _i1.Mock
    implements _i3.AppFlavorRepository {
  MockAppFlavorRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String getBaseUrl() => (super.noSuchMethod(
        Invocation.method(
          #getBaseUrl,
          [],
        ),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.method(
            #getBaseUrl,
            [],
          ),
        ),
      ) as String);

  @override
  String getSearchLocationBaseUrl() => (super.noSuchMethod(
        Invocation.method(
          #getSearchLocationBaseUrl,
          [],
        ),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.method(
            #getSearchLocationBaseUrl,
            [],
          ),
        ),
      ) as String);
}
