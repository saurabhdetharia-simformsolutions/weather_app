// Mocks generated by Mockito 5.4.4 from annotations
// in weather_app/test/unit_test_case/core/domain/use_cases/weather/get_weather_details_usecases_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i2;
import 'package:dio/dio.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:weather_app/core/data/models/current_weather/current_weather_res.dart'
    as _i7;
import 'package:weather_app/core/domain/repositories/weather_repository.dart'
    as _i4;
import 'package:weather_app/error/server_failures_exception.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDioException_1 extends _i1.SmartFake implements _i3.DioException {
  _FakeDioException_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [WeatherRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherRepository extends _i1.Mock implements _i4.WeatherRepository {
  MockWeatherRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.ServerFailuresException, _i7.CurrentWeatherRes>>
      getWeatherDetails(
    _i3.CancelToken? cancelToken,
    Map<String, dynamic>? queryParameter,
  ) =>
          (super.noSuchMethod(
            Invocation.method(
              #getWeatherDetails,
              [
                cancelToken,
                queryParameter,
              ],
            ),
            returnValue: _i5.Future<
                _i2.Either<_i6.ServerFailuresException,
                    _i7.CurrentWeatherRes>>.value(_FakeEither_0<
                _i6.ServerFailuresException, _i7.CurrentWeatherRes>(
              this,
              Invocation.method(
                #getWeatherDetails,
                [
                  cancelToken,
                  queryParameter,
                ],
              ),
            )),
          ) as _i5.Future<
              _i2.Either<_i6.ServerFailuresException, _i7.CurrentWeatherRes>>);
}

/// A class which mocks [CancelToken].
///
/// See the documentation for Mockito's code generation for more information.
class MockCancelToken extends _i1.Mock implements _i3.CancelToken {
  MockCancelToken() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set requestOptions(_i3.RequestOptions? _requestOptions) => super.noSuchMethod(
        Invocation.setter(
          #requestOptions,
          _requestOptions,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isCancelled => (super.noSuchMethod(
        Invocation.getter(#isCancelled),
        returnValue: false,
      ) as bool);

  @override
  _i5.Future<_i3.DioException> get whenCancel => (super.noSuchMethod(
        Invocation.getter(#whenCancel),
        returnValue: _i5.Future<_i3.DioException>.value(_FakeDioException_1(
          this,
          Invocation.getter(#whenCancel),
        )),
      ) as _i5.Future<_i3.DioException>);

  @override
  void cancel([Object? reason]) => super.noSuchMethod(
        Invocation.method(
          #cancel,
          [reason],
        ),
        returnValueForMissingStub: null,
      );
}
